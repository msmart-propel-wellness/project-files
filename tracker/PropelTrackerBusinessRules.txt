PropelTracker -- FrontEnd Business Rules

ENTRIES

PropelHtml5\App\controllers\controllers.entries.js
    contains data for user options under the Entries tab  (create (default), view activity, view biometric, about)
    contains data for default entry type (fitness) in decorateEntriesUrl

Fitness activity (id = 1; default)
Nutrition activity (id = 2)
Wellness activity (id = 3)
    PropelHtml5\App\layout\entries\newfitness.html
        link to show help text in entry form
        selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
        the structure of the entry form for each of the activity types (fitness, nutrition, wellness) is the same
        the content for "which activity" changes based on the activity type
        activity measure label for units changes based on the selected activity type
        user can share activity as a favorite after one is selected
        validates form data for required input, format, range, etc.
            date: required, format dd/mm/yyyy, range is 60 days prior to entry date
            activity: required
            amount: see validation rules (range, values, etc)
            notes: optional
        show points and calories (if applicable) when entering amount values
        submit button disabled until form validation passes
    PropelHtml5\App\controllers\controllers.entries.newfitness.js
        set any default values needed for the view
        formats dates with Moment.js library (deprecated; recommended to use Day.js or Luxon)
        computed values
            entryDateRange
                validates the date entered against the allowable daterange
            isValidActivity
                validates activity as required field
        event handlers
            goToForm
                route to the selected entry form component
            onActivitySelect
                show the Share as Favorite button
                set some additional form values based on the selected activity
                evaluateMeasureParams()
            evaluateMeasureParams
                validate the amount against the allowed range of values
                validate the number of digits after the decimal in the amount
                update the calculator values for points and calories
            doSubmit
                create the request model from the form values
                submit model to the api
                on success
                    reset form values
                    show alert for sucess or failure
            resetForm
                needed only in a 'delegate' situation?
        activate()
            makes async calls (gets promises)
                setLocalAppSettings
                    the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                    sets the min/max for entry datepicker
                    new endpoint for getting app settings when not authenticated: /configuration/default
                    new endpoint for getting app settings when authenticated: /configuration/user
                getMostRecentWeight
                    gets most recent weight entry for the member; if measure system is metric, convert lbs to kg
                getDelegateMembers
                    not doing this?
                getPrivateActivities
                    ** OLD ** successively gets private, favorite, and fitness activities
                        get private activities at /activity/private and push Ids into array
                        get favorite activities at /activity/favorite and push Ids into array
                        get activity list at /activity/localized
                    ** NEW **
                        load one complete list of activities into the app and leverage caching
                            public + private + favorites?
                        render a filtered list of activities based on the view and use case
                            filter by activityTypeId, access level (public/private)
                            when creating an activity, filter by CanUserCreateReference and Enabled
                            when editing an activity, follow same rule as for 'create' but also keep the current activity selected, even if it disabled
            activate the controller with the promises
            highlight the selected activity type button

Biometric
    PropelHtml5\App\layout\entries\newbiometric.html
        link to show help text in entry form
        selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
        the content for "which biometric" changes based on the biometric type
        biometric measure label for units changes based on the selected biometric type
        validates form data for required input, format, range, etc.
            date: required, format dd/mm/yyyy, range is 60 days prior to entry date
            activity: required
            amount: see validation rules (range, values, etc)
            notes: optional
        submit button disabled until form validation passes
    PropelHtml5\App\controllers\controllers.entries.newbiometric.js
        set any default values needed for the view
        formats dates with Moment.js (deprecated; recommended to use Day.js or Luxon)
        computed values
            entryDateRange
                validates the date entered against the allowable daterange
        event handlers
            goToForm
                route to the selected entry form component
            onActivitySelect
                set some additional form values based on the selected activity
                evaluateMeasureParams()
            evaluateMeasureParams
                valid = true if no range defined
                validate the amount against the allowed range of values
                validate the number of digits after the decimal in the amount
            doSubmit
                create the request model from the form values
                submit model to the api
                on success
                    reset form values
                    show alert for sucess or failure
            resetForm
                needed only in a 'delegate' situation?
            activate()
                make async calls (get promises)
                    setLocalAppSettings
                    getDelegateMembers
                    getPrivateHealthCategories
                activate the controller