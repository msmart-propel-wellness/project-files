PropelTracker -- FrontEnd Business Rules
Location of files
    PropelHtml5\App\controllers
    PropelHtml5\App\layout\{folder}

GENERAL
    controllers.js

COMPETITIONS
    controllers.competitions.js
    
    ABOUT (Competitions tab, About button)
        controllers.competitions.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html
        
    ADDINDIVIDUALS
        controllers.competitions.addindividuals.js
        addindividuals.html    
    
    ADDTEAMS
        controllers.competitions.addteams.js
        addteams.html
    
    BADGES
        controllers.competitions.badges.js
        badges.html
    
    DETAIL
        controllers.competitions.detail.js
        detail.html
    
    EDIT
        controllers.competitions.edit.js
        edit.html
    
    GRID
        controllers.competitions.grid.js
        grid.html
    
    PARTICIPATION
        controllers.competitions.participation.js
        participation.html

    PARTICIPATIONINVITE
        controllers.competitions.participationinvite.js
        participationinvite.html    

    PRIVATEFITNESS (Competitions tab, Create button)
        controllers.competitions.privatefitness.js
        privatefitness.html

    VIEW (Competitions tab, View button)
        controllers.competitions.view.js
        view.html

DASHBOARD
    controllers.dashboard.js

ENTRIES
    controllers.entries.js
        contains data for user options under the Entries tab  (create (default), view activity, view biometric, about)
        contains data for default entry type (fitness) in decorateEntriesUrl
    
    ABOUT (Entries tab, About button)
        controllers.entries.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html
            static page that binds to a variable containing HTML markup and gives helpful information

    DETAILBIOMETRIC (Entries tab, View Biometric button, (in grid view) click the Biometric name)
        controllers.entries.detailbiometric.js
            set any default values needed for the view
            computed values
                isDelegate
                    determines if user is a delegate (coach) based on the user's UID (in the route params)
            event handlers
                clickEdit
                    updates the window location url to the EDITBIOMETRIC route
                clickDelete
                    hides the Delete modal
                    doDeleteEntry()
                getEntryDetailBiometric
                    checks for truthiness of app.profile and routeParams
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a GET call to getEntryDetailBbiometric url
                    on successful response, assign display values from the data object
                    set values to show calories, points, etc.
                doDeleteEntry
                    checks for truthiness of app.profile
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a DELETE call
            activate()
                make async calls (gets promises)
                    getEntryDetailBiometric
        detailbiometric.html
            Biometric Entry panel
                Date
                Notes
                Measurement
                    Description
                    Amount - Measure
                    DataProviderInfo
            Edit button
            Delete button
            Text-Info ('entriesCanModifyNoAccessMsg')
            Back button
            Modal for delete confirmation

    DETAILFITNESS (Entries tab, View Activity button, click the Activity name ('5k Run'))
        controllers.entries.detailfitness.js
            set any default values needed for the view
            computed values
                isDelegate
                    determines if user is a delegate (coach) based on the user's UID (in the route params)
            event handlers
                clickEdit
                    updates the window location url to the EDITFITNESS route
                clickDelete
                    hides the Delete modal
                    doDeleteEntry()
                getEntryDetailFitness
                    checks for truthiness of app.profile and routeParams
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a GET call to getEntryDetailFitness url
                    on successful response, assign display values from the data object
                    set values to show calories, points, etc.
                doDeleteEntry
                    checks for truthiness of app.profile
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a DELETE call
            activate()
                make async calls (gets promises)
                    getEntryDetailFitness
        detailfitness.html
            Activity Entry panel
                Date
                Notes
                Activity
                    Description
                    Amount - Measure
                    DataProviderInfo
                Points
                    Calculated Points
                    Calculated Calories (if applicable)
            Edit button
            Delete button
            Text-Info ('entriesCanModifyNoAccessMsg')
            Back button
            Modal for delete confirmation

    EDITBIOMETRIC (Entries tab, View Biometric button, DetailBiometric view, Edit button)
        controllers.entries.editbiometric.js
            set any default values needed for the view
            formats dates with Moment.js (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
                    inputdate is between mindate/maxdate (inclusive)
                isDelegateSelected
                    are we keeping this?
            event handlers
                onActivitySelect
                    if a biometric is selected
                        set some additional form values based on the selected activity
                        evaluateMeasureParams()
                evaluateMeasureParams
                    valid = true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits after the decimal in the amount
                doSubmit
                    if form is valid,
                        create the request model from the form values
                        submit model to the api
                        on success, return to the calling url
                activate()
                    make async calls (get promises)
                        setLocalAppSettings
                            the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                            sets the min/max for entry datepicker
                            new endpoint for getting app settings when not authenticated: /configuration/default
                            new endpoint for getting app settings when authenticated: /configuration/user
                        getDelegateMembers
                            not keeping?
                        getEditDetail
                            if app.profile and activityid are truthy
                                create the request model
                                make a GET request to the api with the request model
                                on success, setEditDetail()
                                else return to calling url
                        getPrivateHealthCategories
                            if app.profile is truthy
                                create a request model
                                send the model with a GET request to api
                                save result as array of privateHealthCategories
                                getHealthCategories()
                    activate the controller
            methods
                getHealthCategories
                    if app.profile is truthy
                        create a request model
                        make a GET request to the api
                        if an object gets returned
                            create two lists of biometrics (public, private)
                            assign vm.allhealthcategories to return object
                            modify the biometric names to say 'disabled' if CanUserCreateReference == false
                                and Enabled == false
                            separate the biometrics into public and private
                            ** not sure what else is happening here
                                build the privatecategory list

        editbiometric.html
            link to show help text in entry form
            selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
            the content for "which biometric" changes based on the biometric type
            biometric measure label for units changes based on the selected biometric type
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount: see validation rules (range, values, etc)
                notes: optional
            submit button disabled until form validation passes

    EDITFITNESS (Entries tab, View Activity button, DetailFitness view, Edit button)
        controllers.entries.editfitness.js
            set any default values needed for the view
            formats dates with Moment.js library (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
                    inputdate is between mindate/maxdate (inclusive)
                isValidActivity
                    validates activity as required field
                isDelegateSelected
                    are we keeping this??
            event handlers
                onActivitySelect
                    if an activity is selected
                        show the Share as Favorite button
                        set some additional form values based on the selected activity
                        evaluateMeasureParams()
                        $rootScope.prepSharedFavorites() ??
                    else
                        hide Share as Favorite button
                        reset activity measure name label to default
                evaluateMeasureParams
                    validate the amount as true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits (2) after the decimal in the amount
                    update the calculator values for points, calories burned, calories consumed
                doSubmit
                    create the request model from the form values
                    POST the request model to the api
                    on success, return back to the calling URL
            methods
                setEditDetail
                    set default values for the selected activity
                    validate activity as required
                    call 'whichActivitySelected' (which simply calls evaluateMeasureParams)
                    set startDate and validate as required
                    set amount and validate as required
                    call 'onActivitySelect'
                    set notes
                    if delegate is being used, disable notes
                    getMostRecentWeight()
            activate()
                makes async calls (gets promises)
                    setLocalAppSettings
                        the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                        sets the min/max for entry datepicker
                        new endpoint for getting app settings when not authenticated: /configuration/default
                        new endpoint for getting app settings when authenticated: /configuration/user
                    getMostRecentWeight
                        gets most recent weight entry for the member
                            create the request model
                            make a GET call to the api
                            if an item is returned and measure system is metric, convert lbs to kg
                    getDelegateMembers
                        not doing this?
                    getEditDetail
                        if app.profile and activityid are truthy
                            create the request model
                            make a GET request to the api with the request model
                            on success, setEditDetail()
                            else return to calling url
                    getPrivateActivities
                        ** OLD ** successively gets private, favorite, and fitness activities
                            get private activities at /activity/private and push Ids into array
                            get favorite activities at /activity/favorite and push Ids into array
                            get activity list at /activity/localized
                        ** NEW **
                            load one complete list of activities into the app and leverage caching
                                public + private + favorites?
                            render a filtered list of activities based on the view and use case
                                filter by activityTypeId, access level (public/private)
                                when creating an activity, filter by CanUserCreateReference and Enabled
                                when editing an activity, follow same rule as for 'create' but also keep the current activity selected, even if it disabled
                activate the controller with the promises
                highlight the selected activity type button
        editfitness.html
            link to show back button
            link to show help text in entry form
            select-list for delegates, if any
            the content for "which activity" changes based on the activity type
            activity measure label for units changes based on the selected activity type
            user can share activity as a favorite after one is selected
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount/activity measure: see validation rules (range, values, etc)
                notes: optional
            show points and calories (if applicable) when entering amount values
            cancel button
            save button disabled until form validation passes

    GRIDBIOMETRIC (Entries tab, View Biometric button, (in Latest Biometrics) grid button or View All Biometric Entries)
        controllers.entries.gridbiometric.js
            set any default values needed for the view
            computed values
                pageClass - updates class for active page
                isDelegateSelected - are we keeping this?
                isActivitySelected
            event handlers
                changeSelectPage - handles pagination
                gotoUrl
                    click handler for viewing details; handles delegates in the url
                updateFilter
                prepDeleteEntry
                    prepare items (message) for deleting an entry; show the delete modal
                deleteEntry
                    if app.profile is truthy
                        create the request model
                        send a DELETE request with the request model to the api
                        if success
                            reset some values
                            getBiometricEntries()
            activate()
                make async calls to get promises
                    getDelegateMembers - are we keeping this?
                    getHealthCategories
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            assign response object to model used for activities dropdown list
                    getBiometricEntries
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            if an activity is selected (activityid >= 1)
                                get all the entries with the selected BiometricId
                                push those entries into an array for the grid display
                                if there are any entries to display in the chart
                                    set the chart object and graph title
                                else
                                    hide the chart panel and clear the chart data
                                singleBiometricEntriesGraph(vm.chart, "#bioentriesgraph1")
                                    activate the chart
                                    see PropelHTML5\App\common\tvc\tvc-propel-highchart.js
                                set the canModify value for each entry
                                    see PropelHTML5\App\core\helpers\permissions.js
                                set any pagination values needed for correct viewing
                activate the controller
        gridbiometric.html
            Back button
            Filter row
                if delegates, show delegate dropdown list
                biometrics dropdown
                items per page dropdown
                update filter button
            Chart panel (highcharts)
            List of recent biometrics entries for selected biometric
                Date, Biometric Measure (ex. Weight), Amount, Delete?, icon for locked if cannot modify
            Pagination controls
            Delete dialog modal

    GRIDFITNESS (Entries tab, View Activity button, (in Recent Activity)grid button or View All Activity Entries)
        controllers.entries.gridfitness.js
            set any default values needed for the view
            computed values
                pageClass - updates class for active page
                isDelegateSelected - are we keeping this?
                isSubtypeSelected - syncs the selected subtype (all, fitness, nutrition, wellness) from the url
                isActivitySelected - syncs the selected activity type from the url
            event handlers
                changeSelectPage - handles pagination
                gotoUrl
                    click handler for viewing details; handles delegates in the url
                updateSubtype
                    click handler; refreshes fitness activities to sync
                updateFilter
                    click handler for filter; refreshes fitness entries
                prepDeleteEntry
                    prepare items (message) for deleting an entry; show the delete modal
                deleteEntry
                    if app.profile is truthy
                        create the request model
                        send a DELETE request with the request model to the api
                        if success
                            reset some values
                            getFitnessEntries()
            activate()
                make async calls to get promises
                    getDelegateMembers - are we keeping this?
                    getFitnessActivities
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            get activities that match activity type for use with activities dropdown list
                    getFitnessEntries
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            if a specific subtype is selected
                                get all the activities with the selected ActivityTypeId
                            if an activity is selected (activityid >= 1)
                                get all the entries with the selected ActivityId
                                push those entries into an array for the grid display
                                if there are any entries to display in the chart
                                    set the chart object and graph title
                                else
                                    hide the chart panel and clear the chart data
                                singleActivityEntriesGraph(vm.chart, "#actentriesgraph1")
                                    activate the chart
                                    see PropelHTML5\App\common\tvc\tvc-propel-highchart.js
                                add the respective icon for the activity subtype
                                set the canModify value for each entry
                                    see PropelHTML5\App\core\helpers\permissions.js
                                calculate the activity points and calories
                                set any pagination values needed for correct viewing
                activate the controller
        gridfitness.html
            Back button
            Filter row
                if delegates, show delegate dropdown list
                fitnesssubtype dropdown
                activities dropdown
                items per page dropdown
                update filter button
            Chart panel (highcharts)
            List of recent biometrics entries for selected biometric
                Activity icon, Date, Activity, Amount, Points, Calories burned Delete?, icon for locked if cannot modify
            Pagination controls
            Delete dialog modal

    NEWBIOMETRIC (Entries tab, Create button, Biometric sub-button)
        controllers.entries.newbiometric.js
            set any default values needed for the view
            formats dates with Moment.js (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
            event handlers
                goToForm
                    route to the selected entry form component
                onActivitySelect
                    set some additional form values based on the selected activity
                    evaluateMeasureParams()
                evaluateMeasureParams
                    valid = true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits after the decimal in the amount
                doSubmit
                    create the request model from the form values
                    submit model to the api
                    on success
                        reset form values
                        show alert for sucess or failure
                resetForm
                    needed only in a 'delegate' situation?
                activate()
                    make async calls (get promises)
                        setLocalAppSettings
                            the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                            sets the min/max for entry datepicker
                            new endpoint for getting app settings when not authenticated: /configuration/default
                            new endpoint for getting app settings when authenticated: /configuration/user
                        getDelegateMembers
                            are we still doing this?
                        getPrivateHealthCategories
                            if app.profile is truthy
                                create a request model
                                send the model with a GET request to api
                                save result as array of privateHealthCategories
                                getHealthCategories()
                    activate the controller
            methods
                getHealthCategories
                    if app.profile is truthy
                        create a request model
                        make a GET request to the api
                        if an object gets returned
                            create two lists of biometrics (public, private)
                            assign vm.healthcategories to public list
                            ** not sure what else is happening here
        newbiometric.html
            link to show help text in entry form
            selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
            the content for "which biometric" changes based on the biometric type
            biometric measure label for units changes based on the selected biometric type
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount: see validation rules (range, values, etc)
                notes: optional
            submit button disabled until form validation passes

    NEWFITNESS (Entries tab, Create button, Fitness/Nutrition/Wellness sub-button)
        controllers.entries.newfitness.js (Fitness [id:1], Nutrition [id:2], Wellness[id:3])
            set any default values needed for the view
            formats dates with Moment.js library (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
                isValidActivity
                    validates activity as required field
            event handlers
                goToForm
                    route to the selected entry form component
                onActivitySelect
                    show the Share as Favorite button
                    set some additional form values based on the selected activity
                    evaluateMeasureParams()
                evaluateMeasureParams
                    validate the amount as true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits after the decimal in the amount
                    update the calculator values for points, calories burned, calories consumed
                doSubmit
                    create the request model from the form values
                    submit model to the api
                    on success
                        reset form values
                        show alert for sucess or failure
                resetForm
                    needed only in a 'delegate' situation?
            activate()
                makes async calls (gets promises)
                    setLocalAppSettings
                        the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                        sets the min/max for entry datepicker
                        new endpoint for getting app settings when not authenticated: /configuration/default
                        new endpoint for getting app settings when authenticated: /configuration/user
                    getMostRecentWeight
                        gets most recent weight entry for the member; if measure system is metric, convert lbs to kg
                    getDelegateMembers
                        not doing this?
                    getPrivateActivities
                        ** OLD ** successively gets private, favorite, and fitness activities
                            get private activities at /activity/private and push Ids into array
                            get favorite activities at /activity/favorite and push Ids into array
                            get activity list at /activity/localized
                        ** NEW **
                            load one complete list of activities into the app and leverage caching
                                public + private + favorites?
                            render a filtered list of activities based on the view and use case
                                filter by activityTypeId, access level (public/private)
                                when creating an activity, filter by CanUserCreateReference and Enabled
                                when editing an activity, follow same rule as for 'create' but also keep the current activity selected, even if it disabled
                activate the controller with the promises
                highlight the selected activity type button
        newfitness.html
            link to show help text in entry form
            selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
            the structure of the entry form for each of the activity types (fitness, nutrition, wellness) is the same
            the content for "which activity" changes based on the activity type
            activity measure label for units changes based on the selected activity type
            user can share activity as a favorite after one is selected
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount: see validation rules (range, values, etc)
                notes: optional
            show points and calories (if applicable) when entering amount values
            submit button disabled until form validation passes

    STATS
        controllers.entries.stats.js
        stats.html
    
    VIEWBIOMETRIC (Entries tab, View Biometric button)
        controllers.entries.viewbiometric.js
        viewbiometric.html
    
    VIEWFITNESS (Entries tab, View Activity button)
        controllers.entries.viewfitness.js
        viewfitness.html

GOALS
    controllers.goals.js
    goals.html

    ABOUT (Goals tab, About button)
        controllers.goals.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html

    DETAILBIOMETRIC
        controllers.goals.detailbiometric.js
        detailbiometric.html

    DETAILFITNESS
        controllers.goals.detailfitness.js
        detailfitness.html

    EDITBIOMETRIC
        controllers.goals.editbiometric.js
        editbiometric.html

    EDITFITNESS
        controllers.goals.editfitness.js
        editfitness.html

    FORMS (Goals tab, Create button)
        controllers.goals.forms.js
        forms.html

    NEWBIOMETRIC
        controllers.goals.newbiometric.js
        newbiometric.html

    NEWFITNESS
        controllers.goals.newfitness.js
        newfitness.html

    VIEW (Goals tab, View button)
        controllers.goals.view.js
        view.html

HELP
    controllers.help.js

    ACHIEVEMENTRANK
        controllers.help.achievementrank.js
        achievementrank.html

    FAQ
        controllers.help.faq.js
        faq.html

    ICONS
        controllers.help.icons.js
        icons.html

INBOX
    controllers.inbox.js

    ABOUT
        controllers.inbox.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html

    CREATE
        controllers.inbox.create.js
        create.html

    VIEW
        controllers.inbox.view.js
        view.html

INCLUDE
    CHANGEPASSWORD
        controllers.settings.changepassword.js
        settings.changepassword.html

    COMMUNICATION
        controllers.settings.communication.js
        settings.communication.html

    EMAIL
        controllers.settings.email.js
        settings.email.html

    MAILADDRERSS
        controllers.settings.mailaddress.js
        settings.mailaddress.html

    SECURITYQUESTIONS
        controllers.settings.securityquestions.js
        settings.securityquestions.html

    TEXTING
        controllers.settings.texting.js
        settings.texting.html

    shell.html

    TEAMCOMPETITIONS
        controllers.teams.teamcompetitions.js
        teams.teamcompetitions.html

    widgetheader.html

SETTINGS
    controllers.settings.js

    AUTHPREF
        controllers.settings.authpref.js
        authpref.html

    AUTHPREFSUCCESS
        controllers.settings.authprefsuccess.js
        authprefsuccess.html

    AUTHVERIFY
        controllers.settings.authverify.js
        authverify.html

    BADGES
        controllers.settings.badges.js
        badges.html

    COMMUNICATIONS
        controllers.settings.communications.js
        communications.html

    GROUPS
        controllers.settings.groups.js
        groups.html

    PASSWORD
        controllers.settings.password.js
        password.html

    PROFILE
        controllers.settings.profile.js
        profile.html
TEAMS
    controllers.teams.js

    ABOUT (Teams tab, About button)
        controllers.teams.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html

    ADDFAMILYMEMBERS
        controllers.teams.addfamilymembers.js
        addfamilymembers.html

    DETAILFAMILYCAPTAIN
        controllers.teams.detailfamilycaptain.js
        detailfamilycaptain.html

    DETAILFAMILYMEMBER
        controllers.teams.detailfamilymember.js
        detailfamilymember.html

    DETAILSTANDARDCAPTAIN
        controllers.teams.detailstandardcaptain.js
        detailstandardcaptain.html

    DETAILSTANDARDINVITE
        controllers.teams.detailstandardinvite.js
        detailstandardinvite.html

    DETAILSTANDARDMEMBER
        controllers.teams.detailstandardmember.js
        detailstandardmember.html

    EDITFORM
        controllers.teams.editform.js
        editform.html

    INVITEMEMBERS
        controllers.teams.invitemembers.js
        invitemembers.html

    NEWFORM (Teams tab, Create button)
        controllers.teams.newform.js
        newform.html

    VIEW (Teams tab, View button)
        controllers.teams.view.js
        view.html
