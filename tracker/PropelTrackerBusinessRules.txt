PropelTracker -- FrontEnd Business Rules
Location of files
    PropelHtml5\App\controllers
    PropelHtml5\App\layout\{folder}

GENERAL
    controllers.js

COMPETITIONS
    controllers.competitions.js
    
    ABOUT (Competitions tab, About button)
        controllers.competitions.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html
        
    ADDINDIVIDUALS
        controllers.competitions.addindividuals.js
        addindividuals.html    
    
    ADDTEAMS
        controllers.competitions.addteams.js
        addteams.html
    
    BADGES
        controllers.competitions.badges.js
        badges.html
    
    DETAIL
        controllers.competitions.detail.js
        detail.html
    
    EDIT
        controllers.competitions.edit.js
        edit.html
    
    GRID
        controllers.competitions.grid.js
        grid.html
    
    PARTICIPATION
        controllers.competitions.participation.js
        participation.html

    PARTICIPATIONINVITE
        controllers.competitions.participationinvite.js
        participationinvite.html    

    PRIVATEFITNESS (Competitions tab, Create button)
        controllers.competitions.privatefitness.js
        privatefitness.html

    VIEW (Competitions tab, View button)
        controllers.competitions.view.js
        view.html

DASHBOARD
    controllers.dashboard.js

ENTRIES
    controllers.entries.js
        contains data for user options under the Entries tab  (create (default), view activity, view biometric, about)
        contains data for default entry type (fitness) in decorateEntriesUrl
    
    ABOUT (Entries tab, About button)
        controllers.entries.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html
            static page that binds to a variable containing HTML markup and gives helpful information

    DETAILBIOMETRIC (Entries tab, View Biometric button, (in grid view) click the Biometric name)
        controllers.entries.detailbiometric.js
            set any default values needed for the view
            computed values
                isDelegate
                    determines if user is a delegate (coach) based on the user's UID (in the route params)
            event handlers
                clickEdit
                    updates the window location url to the EDITBIOMETRIC route
                clickDelete
                    hides the Delete modal
                    doDeleteEntry()
                getEntryDetailBiometric
                    checks for truthiness of app.profile and routeParams
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a GET call to getEntryDetailBbiometric url
                    on successful response, assign display values from the data object
                    set values to show calories, points, etc.
                doDeleteEntry
                    checks for truthiness of app.profile
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a DELETE call
            activate()
                make async calls (gets promises)
                    getEntryDetailBiometric
        detailbiometric.html
            Biometric Entry panel
                Date
                Notes
                Measurement
                    Description
                    Amount - Measure
                    DataProviderInfo
            Edit button
            Delete button
            Text-Info ('entriesCanModifyNoAccessMsg')
            Back button
            Modal for delete confirmation

    DETAILFITNESS (Entries tab, View Activity button, click the Activity name ('5k Run'))
        controllers.entries.detailfitness.js
            set any default values needed for the view
            computed values
                isDelegate
                    determines if user is a delegate (coach) based on the user's UID (in the route params)
            event handlers
                clickEdit
                    updates the window location url to the EDITFITNESS route
                clickDelete
                    hides the Delete modal
                    doDeleteEntry()
                getEntryDetailFitness
                    checks for truthiness of app.profile and routeParams
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a GET call to getEntryDetailFitness url
                    on successful response, assign display values from the data object
                    set values to show calories, points, etc.
                doDeleteEntry
                    checks for truthiness of app.profile
                    get memberId from app.profile or delegateUid
                    construct the request model
                    make a DELETE call
            activate()
                make async calls (gets promises)
                    getEntryDetailFitness
        detailfitness.html
            Activity Entry panel
                Date
                Notes
                Activity
                    Description
                    Amount - Measure
                    DataProviderInfo
                Points
                    Calculated Points
                    Calculated Calories (if applicable)
            Edit button
            Delete button
            Text-Info ('entriesCanModifyNoAccessMsg')
            Back button
            Modal for delete confirmation

    EDITBIOMETRIC (Entries tab, View Biometric button, DetailBiometric view, Edit button)
        controllers.entries.editbiometric.js
            set any default values needed for the view
            formats dates with Moment.js (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
                    inputdate is between mindate/maxdate (inclusive)
                isDelegateSelected
                    are we keeping this?
            event handlers
                onActivitySelect
                    if a biometric is selected
                        set some additional form values based on the selected activity
                        evaluateMeasureParams()
                evaluateMeasureParams
                    valid = true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits after the decimal in the amount
                doSubmit
                    if form is valid,
                        create the request model from the form values
                        submit model to the api
                        on success, return to the calling url
                activate()
                    make async calls (get promises)
                        setLocalAppSettings
                            the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                            sets the min/max for entry datepicker
                            new endpoint for getting app settings when not authenticated: /configuration/default
                            new endpoint for getting app settings when authenticated: /configuration/user
                        getDelegateMembers
                            not keeping?
                        getEditDetail
                            if app.profile and activityid are truthy
                                create the request model
                                make a GET request to the api with the request model
                                on success, setEditDetail()
                                else return to calling url
                        getPrivateHealthCategories
                            if app.profile is truthy
                                create a request model
                                send the model with a GET request to api
                                save result as array of privateHealthCategories
                                getHealthCategories()
                    activate the controller
            methods
                getHealthCategories
                    if app.profile is truthy
                        create a request model
                        make a GET request to the api
                        if an object gets returned
                            create two lists of biometrics (public, private)
                            assign vm.allhealthcategories to return object
                            modify the biometric names to say 'disabled' if CanUserCreateReference == false
                                and Enabled == false
                            separate the biometrics into public and private
                            ** not sure what else is happening here
                                build the privatecategory list

        editbiometric.html
            link to show help text in entry form
            selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
            the content for "which biometric" changes based on the biometric type
            biometric measure label for units changes based on the selected biometric type
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount: see validation rules (range, values, etc)
                notes: optional
            submit button disabled until form validation passes

    EDITFITNESS (Entries tab, View Activity button, DetailFitness view, Edit button)
        controllers.entries.editfitness.js
            set any default values needed for the view
            formats dates with Moment.js library (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
                    inputdate is between mindate/maxdate (inclusive)
                isValidActivity
                    validates activity as required field
                isDelegateSelected
                    are we keeping this??
            event handlers
                onActivitySelect
                    if an activity is selected
                        show the Share as Favorite button
                        set some additional form values based on the selected activity
                        evaluateMeasureParams()
                        $rootScope.prepSharedFavorites() ??
                    else
                        hide Share as Favorite button
                        reset activity measure name label to default
                evaluateMeasureParams
                    validate the amount as true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits (2) after the decimal in the amount
                    update the calculator values for points, calories burned, calories consumed
                doSubmit
                    create the request model from the form values
                    POST the request model to the api
                    on success, return back to the calling URL
            methods
                setEditDetail
                    set default values for the selected activity
                    validate activity as required
                    call 'whichActivitySelected' (which simply calls evaluateMeasureParams)
                    set startDate and validate as required
                    set amount and validate as required
                    call 'onActivitySelect'
                    set notes
                    if delegate is being used, disable notes
                    getMostRecentWeight()
            activate()
                makes async calls (gets promises)
                    setLocalAppSettings
                        the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                        sets the min/max for entry datepicker
                        new endpoint for getting app settings when not authenticated: /configuration/default
                        new endpoint for getting app settings when authenticated: /configuration/user
                    getMostRecentWeight
                        gets most recent weight entry for the member
                            create the request model
                            make a GET call to the api
                            if an item is returned and measure system is metric, convert lbs to kg
                    getDelegateMembers
                        not doing this?
                    getEditDetail
                        if app.profile and activityid are truthy
                            create the request model
                            make a GET request to the api with the request model
                            on success, setEditDetail()
                            else return to calling url
                    getPrivateActivities
                        ** OLD ** successively gets private, favorite, and fitness activities
                            get private activities at /activity/private and push Ids into array
                            get favorite activities at /activity/favorite and push Ids into array
                            get activity list at /activity/localized
                        ** NEW **
                            load one complete list of activities into the app and leverage caching
                                public + private + favorites?
                            render a filtered list of activities based on the view and use case
                                filter by activityTypeId, access level (public/private)
                                when creating an activity, filter by CanUserCreateReference and Enabled
                                when editing an activity, follow same rule as for 'create' but also keep the current activity selected, even if it disabled
                activate the controller with the promises
                highlight the selected activity type button
        editfitness.html
            link to show back button
            link to show help text in entry form
            select-list for delegates, if any
            the content for "which activity" changes based on the activity type
            activity measure label for units changes based on the selected activity type
            user can share activity as a favorite after one is selected
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount/activity measure: see validation rules (range, values, etc)
                notes: optional
            show points and calories (if applicable) when entering amount values
            cancel button
            save button disabled until form validation passes

    GRIDBIOMETRIC (Entries tab, View Biometric button, (in Latest Biometrics) grid button or View All Biometric Entries)
        controllers.entries.gridbiometric.js
            set any default values needed for the view
            computed values
                pageClass - updates class for active page
                isDelegateSelected - are we keeping this?
                isActivitySelected
            event handlers
                changeSelectPage - handles pagination
                gotoUrl
                    click handler for viewing details; handles delegates in the url
                updateFilter
                prepDeleteEntry
                    prepare items (message) for deleting an entry; show the delete modal
                deleteEntry
                    if app.profile is truthy
                        create the request model
                        send a DELETE request with the request model to the api
                        if success
                            reset some values
                            getBiometricEntries()
            activate()
                make async calls to get promises
                    getDelegateMembers - are we keeping this?
                    getHealthCategories
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            assign response object to model used for activities dropdown list
                    getBiometricEntries
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            if an activity is selected (activityid >= 1)
                                get all the entries with the selected BiometricId
                                push those entries into an array for the grid display
                                if there are any entries to display in the chart
                                    set the chart object and graph title
                                else
                                    hide the chart panel and clear the chart data
                                singleBiometricEntriesGraph(vm.chart, "#bioentriesgraph1")
                                    activate the chart
                                    see PropelHTML5\App\common\tvc\tvc-propel-highchart.js
                                set the canModify value for each entry
                                    see PropelHTML5\App\core\helpers\permissions.js
                                set any pagination values needed for correct viewing
                activate the controller
        gridbiometric.html
            Back button
            Filter row
                if delegates, show delegate dropdown list
                biometrics dropdown
                items per page dropdown
                update filter button
            Chart panel (highcharts)
            List of recent biometrics entries for selected biometric
                Date, Biometric Measure (ex. Weight), Amount, Delete?, icon for locked if cannot modify
            Pagination controls
            Delete dialog modal

    GRIDFITNESS (Entries tab, View Activity button, (in Recent Activity)grid button or View All Activity Entries)
        controllers.entries.gridfitness.js
            set any default values needed for the view
            computed values
                pageClass - updates class for active page
                isDelegateSelected - are we keeping this?
                isSubtypeSelected - syncs the selected subtype (all, fitness, nutrition, wellness) from the url
                isActivitySelected - syncs the selected activity type from the url
            event handlers
                changeSelectPage - handles pagination
                gotoUrl
                    click handler for viewing details; handles delegates in the url
                updateSubtype
                    click handler; refreshes fitness activities to sync
                updateFilter
                    click handler for filter; refreshes fitness entries
                prepDeleteEntry
                    prepare items (message) for deleting an entry; show the delete modal
                deleteEntry
                    if app.profile is truthy
                        create the request model
                        send a DELETE request with the request model to the api
                        if success
                            reset some values
                            getFitnessEntries()
            activate()
                make async calls to get promises
                    getDelegateMembers - are we keeping this?
                    getFitnessActivities
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            get activities that match activity type for use with activities dropdown list
                    getFitnessEntries
                        if app.profile is truthy
                            create the request model
                            send a GET request with the request model to the api
                            if a specific subtype is selected
                                get all the activities with the selected ActivityTypeId
                            if an activity is selected (activityid >= 1)
                                get all the entries with the selected ActivityId
                                push those entries into an array for the grid display
                                if there are any entries to display in the chart
                                    set the chart object and graph title
                                else
                                    hide the chart panel and clear the chart data
                                singleActivityEntriesGraph(vm.chart, "#actentriesgraph1")
                                    activate the chart
                                    see PropelHTML5\App\common\tvc\tvc-propel-highchart.js
                                add the respective icon for the activity subtype
                                set the canModify value for each entry
                                    see PropelHTML5\App\core\helpers\permissions.js
                                calculate the activity points and calories
                                set any pagination values needed for correct viewing
                activate the controller
        gridfitness.html
            Back button
            Filter row
                if delegates, show delegate dropdown list
                fitnesssubtype dropdown
                activities dropdown
                items per page dropdown
                update filter button
            Chart panel (highcharts)
            List of recent biometrics entries for selected biometric
                Activity icon, Date, Activity, Amount, Points, Calories burned Delete?, icon for locked if cannot modify
            Pagination controls
            Delete dialog modal

    NEWBIOMETRIC (Entries tab, Create button, Biometric sub-button)
        controllers.entries.newbiometric.js
            set any default values needed for the view
            formats dates with Moment.js (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
            event handlers
                goToForm
                    route to the selected entry form component
                onActivitySelect
                    set some additional form values based on the selected activity
                    evaluateMeasureParams()
                evaluateMeasureParams
                    valid = true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits after the decimal in the amount
                doSubmit
                    create the request model from the form values
                    submit model to the api
                    on success
                        reset form values
                        show alert for sucess or failure
                resetForm
                    needed only in a 'delegate' situation?
                activate()
                    make async calls (get promises)
                        setLocalAppSettings
                            the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                            sets the min/max for entry datepicker
                            new endpoint for getting app settings when not authenticated: /configuration/default
                            new endpoint for getting app settings when authenticated: /configuration/user
                        getDelegateMembers
                            are we still doing this?
                        getPrivateHealthCategories
                            if app.profile is truthy
                                create a request model
                                send the model with a GET request to api
                                save result as array of privateHealthCategories
                                getHealthCategories()
                    activate the controller
            methods
                getHealthCategories
                    if app.profile is truthy
                        create a request model
                        make a GET request to the api
                        if an object gets returned
                            create two lists of biometrics (public, private)
                            assign vm.healthcategories to public list
                            ** not sure what else is happening here
        newbiometric.html
            link to show help text in entry form
            selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
            the content for "which biometric" changes based on the biometric type
            biometric measure label for units changes based on the selected biometric type
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount: see validation rules (range, values, etc)
                notes: optional
            submit button disabled until form validation passes

    NEWFITNESS (Entries tab, Create button, Fitness/Nutrition/Wellness sub-button)
        controllers.entries.newfitness.js (Fitness [id:1], Nutrition [id:2], Wellness[id:3])
            set any default values needed for the view
            formats dates with Moment.js library (deprecated; recommended to use Day.js or Luxon)
            computed values
                entryDateRange
                    validates the date entered against the allowable daterange
                isValidActivity
                    validates activity as required field
            event handlers
                goToForm
                    route to the selected entry form component
                onActivitySelect
                    show the Share as Favorite button
                    set some additional form values based on the selected activity
                    evaluateMeasureParams()
                evaluateMeasureParams
                    validate the amount as true if no range defined
                    validate the amount against the allowed range of values
                    validate the number of digits after the decimal in the amount
                    update the calculator values for points, calories burned, calories consumed
                doSubmit
                    create the request model from the form values
                    submit model to the api
                    on success
                        reset form values
                        show alert for sucess or failure
                resetForm
                    needed only in a 'delegate' situation?
            activate()
                makes async calls (gets promises)
                    setLocalAppSettings
                        the app settings should either be only loaded once at the initial load of the tracker (possibly injected in the HTML - the current tracker does this) OR should be cached.
                        sets the min/max for entry datepicker
                        new endpoint for getting app settings when not authenticated: /configuration/default
                        new endpoint for getting app settings when authenticated: /configuration/user
                    getMostRecentWeight
                        gets most recent weight entry for the member; if measure system is metric, convert lbs to kg
                    getDelegateMembers
                        not doing this?
                    getPrivateActivities
                        ** OLD ** successively gets private, favorite, and fitness activities
                            get private activities at /activity/private and push Ids into array
                            get favorite activities at /activity/favorite and push Ids into array
                            get activity list at /activity/localized
                        ** NEW **
                            load one complete list of activities into the app and leverage caching
                                public + private + favorites?
                            render a filtered list of activities based on the view and use case
                                filter by activityTypeId, access level (public/private)
                                when creating an activity, filter by CanUserCreateReference and Enabled
                                when editing an activity, follow same rule as for 'create' but also keep the current activity selected, even if it disabled
                activate the controller with the promises
                highlight the selected activity type button
        newfitness.html
            link to show help text in entry form
            selector buttons for four types of entries (fitness activity, nutrition activity, wellness, activity, biometric entry)
            the structure of the entry form for each of the activity types (fitness, nutrition, wellness) is the same
            the content for "which activity" changes based on the activity type
            activity measure label for units changes based on the selected activity type
            user can share activity as a favorite after one is selected
            validates form data for required input, format, range, etc.
                date: required, format dd/mm/yyyy, range is 60 days prior to entry date
                activity: required
                amount: see validation rules (range, values, etc)
                notes: optional
            show points and calories (if applicable) when entering amount values
            submit button disabled until form validation passes

    STATS
        controllers.entries.stats.js
        stats.html
    
    VIEWBIOMETRIC (Entries tab, View Biometric button)
        controllers.entries.viewbiometric.js
            set any default values needed for the view
            event handlers
                gotoUrl
                    click handler for viewing details; handles delegates in the url
                    navigates to DetailBiometric or NewBiometric
                drillDown
                    click handler that navigates to GridBiometric
                deleteRecord
                    calls deleteEntry
                viewAll
                    navigates to GridBiometric with activityId set to -1
                populateMostRecentEntries
                    if app.profile is truthy and entries list contains at least 1 entry
                        create a new request model
                        send a GET request with the model to the api (getMostRecentByHealthCategory)
                        foreach most recent entry by health category
                            foreach entry
                                if the entry (category) biometridId matches the most recent entry BiometricId
                                    populate these values for entries
                                        BiometricCheckInId
                                        BiometricCheckInAmount
                                        BiometricCheckInDate
                                        DataProviderInfo (from _$help.DataProviderNameSourceFormatter)
                deleteEntry
                    if app.profile is truthy
                        create a request model
                        send a DELETE request with the model to the api
                        call getBiometricEntries
            activate()
                make async calls (get promises)
                    getBiometricMostRecentEntries (get most recent entry for 10 different biometrics)
                        if app.profile is truthy
                            create a request model
                            send a GET request with the model to the api (getHealthCategories)
                            if data is returned
                                for each item in data returned
                                    create a default data object for the item
                                    push item into entries array with sort order value
                                        sort order
                                            weight
                                            height
                                            bmi
                                            blood glucose
                                            blood pressure (systolic)
                                            blood pressure (diastolic)
                                            cholesterol LDL
                                            cholesterol HDL
                                            cholesterol total
                                            cholesterol triglycerides 
                    getChartInfo
                        if app.profile is truthy
                            set relevant date values
                                current date = today
                                cutoff date = 1 year prior to today
                            create a request model
                            send a GET request with the model to the api (getBiometricEntries)
                            if data is sent back
                                create data objects for the chart (progseries)
                            if data exists in progseries
                                create a chart initialization object
                                call singleBiometricEntriesGraph to activate the graph
        viewbiometric.html
            Chart panel
                highlights Weight or possibly the latest checkin?
            Biometrics panel (latest entries)
                shows 10 of the most popular biometrics
    
    VIEWFITNESS (Entries tab, View Activity button)
        controllers.entries.viewfitness.js
            set any default values needed for the view
            event handlers
                gotoUrl
                    click handler for viewing details; handles delegates in the url
                    navigates to DetailFitness
                drillDown
                    click handler that navigates to GridFitness
                deleteRecord
                    calls deleteEntry
                getIcon
                    gets the appropriate icon for the activity subtype
                viewAll
                    navigates to GridFitness with activityId set to -1
                deleteEntry
                    if app.profile is truthy
                        create a request model
                        send a DELETE request with the model to the api (deleteFitnessEntry)
                        call getFitnessEntries
            activate()
                make async calls (get promises)
                    getFitnessEntries
                    getChartInfo
                        if app.profile is truthy
                            set relevant date values
                                current date = today
                                cutoff date = 1 year prior to today
                            create a request model
                            send a GET request with the model to the api (getFitnessEntries)
                            if data is sent back
                                create data objects for the chart in one of three series
                                    fitnessseries
                                    nutritionseries
                                    wellnessseries
                            if data exists in any of the 3 series
                                create a chart initialization object
                                call activityEntriesByTypeGraph to activate the graph
                        else
                            hide the chart panel
        viewfitness.html
            Chart panel
                highlights latest checkins for Fitness, Nutrition, and Wellness activities
            Recent Activity panel
                shows specific activity checkins, allowing you to view details or drill down to additional data

GOALS
    controllers.goals.js
        contains json data for the three subitems under goals tab (View, Create, Aboutt)

    ABOUT (Goals tab, About button)
        controllers.goals.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html

    DETAILBIOMETRIC (Goals tab, View button, select a biometric goal)
        controllers.goals.detailbiometric.js
            set any default values needed for the view
            computed values
            event handlers
                gotoEdit
                    navigates to GoalsEditBiometric
                deleteGoal
                    hides the delete goal dialog modal
                    calls doDeleteGoal
            methods
                doDeleteGoal
                    if app.profile is truthy
                        create the request model
                        send a DELETE request with the model to the api (DeleteBiometricGoal)
                getChartInfo
                    if app.profile is truthy
                        create a request model
                        send a GET request with the model to the api (getHealthGoalEntries)
                        if returned items exist (are truthy)
                            create items for the progress series; push to an array
                            if biometric measure name == null, set label to default
                            else set to goalInfo.BiometricMeasureName
                            if goalInfo.DateIntervalId == "day"
                                set local variable dateinterval to "day", else "weeks"
                            create a chart initialization object
                            initialize the chart with the object (biometricGoalDetail)
                        else hide the chart panel
            activate()
                make async calls (get promises)
                    getBiometricGoals
                        if app.profile is truthy
                            create a request model
                            make a GET call with request model to api (getBiometricGoalDetail)
                            set scope/view values for items displayed in the detail panel from the returned object
                            if DateIntervalId == "day", then set label to "days"
                            if DateIntervalId == "week, then set label to "weeks"
                            getChartInfo()
                activate the controller
        detailbiometric.html
            Chart panel with goal and progress
            Goal panel with details
                Goal details
                    Start goal info
                    End goal info
                    Biometric measure to track - name, amount data provider
                    Notes
                Edit button
                Delete button

    DETAILFITNESS (Goals tab, View button, select an activity goal)
        controllers.goals.detailfitness.js
            set any default values needed for the view
            computed values
            event handlers
                gotoEdit
                    navigates to GoalsEditFitness
                deleteGoal
                    hides the delete goal dialog modal
                    calls doDeleteGoal
            methods
                doDeleteGoal
                    if app.profile is truthy
                        create the request model
                        send a DELETE request with the model to the api (DeleteFitnessGoal)
                getFitnessActivities(subtype)
                    if app.profile is truthy
                        create a request model
                        send a GET request with the model to the api (getFitnessActivities)
                        for each item in the response object
                            get the activityTypeId
                            if subtype == activityTypeId, the push item onto qualifiedActivities array
                getChartInfo
                    if app.profile is truthy
                        create a request model
                        if returned items exist
                            push items to progseries by looping through returned results
                                activityAmount = 1 if goalInfo.ActivityMeasureName == null; else result[i].ActivityCheckInAmount || 0
                                entrydate = moment(obj[i].ActivityCheckInDate).utc().valueOf();
                                item = [ entrydate, activityAmount ]
                            measurename = basedata.chartlbl if goalinfo.ActivityMeasureName == null
                            else measurename = goalinfo.ActivityMeasureName
                            if goalinfo.DataIntervalId == "day".id
                                datainterval = "day"
                                dataintervallblb = basedata.chartlbl19
                            else
                                datainterval = "week"
                                dataintervallblb = basedata.chartlbl18
                            create a chart initialization object
                            initialize the chart with the object (activityGoalDetail)
                        else hide the chart panel
            activate()
                make async calls (get promises)
                    getFitnessGoals
                        if app.profile is truthy
                            create a request model
                            make a GET call with the request model to api (getFitnessGoalDetail)
                            if response object is truthy
                                getChartInfo()
                                set scope/view values for items displayed in the detail panel from the return object
                                if ActivityMeasureName == null, set measurename to basedata.entrieslbl
                                else set measurename to ActivityMeasureName (can do null coalesce)
                                if DateIntervalId == "day", set scope.datainterval = basedata.day; set scope.dataintervallbl = basedata.days
                                if DateIntervalId == "week", set scope.dataInterval = basedata.week; set scope.dataInterval = basedata.weeks
                                if "all activities" selected, 
                                    show control for all activities, 
                                    hide control for selected activities
                                    getFitnessActivities(subtype)
                                else
                                    hide control for all activities
                                    show control for selected activities
                        else
                            redirect to GoalsView
                activate the controller
        detailfitness.html
            Chart panel with goal and progress
            Goal panel with details
                Goal details
                    Start goal info
                    End goal info
                    Activity to track - name, amount, data provider
                    Notes
                Edit button
                Delete button

    EDITBIOMETRIC
        controllers.goals.editbiometric.js
            set any default values needed for the view
            computed values
            event handlers
                goalDateRange (when StartDate changed)
                    validates input date to be between min/max, or same as original date
                evaluateDurationRange (when duration changed)
                    if date-interval-day is checked, validate duration as between 1 and 365
                    else, validate duration as between 1 and 52
                updateMeasureParams (when measures selection is changed)
                    if event.measures is truthy
                        find the selected biometricId and biometricMeasureId in healthcategories
                            and set $scope values (amtmeasure, minrange, maxrange, decimaldigits)
                        call evaluateMeasureParams to validate
                updateIntervalType
                    -- TODO --
                whichMeasureSelected
                    updateMeasureParams()
                whichDateIntervalChecked
                    * prevents user from changing date interval type (day, week)
                    sets checked attribute for 'day' as checked if 'day' radio selected and editinfo.DateIntervalId == day
                    sets checked attribute for 'week' as checked if 'week' radio selected and editinfo.DateIntervalId == week
                doSubmit
                    create a request model
                        BiometricGoalId: from routeparams or model
                        GoalMeasureId: (was hard-coded as 2)
                        BiometricMeasureId: (get from form)
                        BiometricOpitonId: (was hard-coded as 1)
                        AggregateFunctionId: (was hard-coded as 2)
                        BiometricGoalName: get from form
                        StartDate: get from form
                        CurrentAmt: get from form
                        GoalAmt: get from form
                        DateIntervalId: scope value
                        DateIntervalCount: get from form
                        Notes: get from form
                        BiometricIds: get from form
                        BiometricTypeIds: (was hard-coded as [1])
                        AllBiometrics: (was hard-coded as false)
                    send a POST request with model to the api (updateBiometricGoal)
                    on success, return to GoalsDetailBiometric view with current goalId
            other methods
                evaluateMeasureParams
                    return as valid if no range is defined
                    evaluate current amount (range, digits)
                    evaluate goal amount (range, digits)
                getBiometricEditDetail
                    if app.profile is truthy and vm.editinfo is not empty []
                        set form values (models) and validation states for 
                            Measures
                            Goalname
                            StartDate
                            Duration
                            Current amount
                            Goal amount
                        update date interval labels (week, day)
                        updateIntervalType()
                        set selected activities list
                validateGoal
                    if app.profile is truthy
                        create a request model
                        send a POST request with the request model to the api (validateHealthGoal)
                        if no exception returned, set validation as true
                        else (exception caught) set validation as false
            activate()
                make async calls (get promises)
                    setLocalAppSettings
                        if app.appsettings is truthy
                            $scope.goalmaxage = app.appsettings.goalmaxagebio
                            $scope.goalmaxfuture = app.appsettings.goalmaxfuturebio
                            initialize datepicker object values
                                startdate = $scope.goalmaxage
                                enddate = $scope.goalmaxfuture
                    loadBiometricEditDetail
                        if app.profile is truthy
                            create a request model
                            send a GET request with the model to the api
                            if return object is truthy
                                assign object to vm.editinfo
                                getBiometricEditDetail()
                            else route to GoalsView
                    getHealthCategories
                        if app.profile is truthy
                            create a request model
                            send a GET request with the model to the api (getHealthCategories)
                            if return object is truthy
                                for each item in return object
                                    create a "comkey" property in the object (BiometricId + "|" + BiometricMeasureId)
                                    if item.CanUserCreateReference && item.Enabled || item.BiometridId == $scope.biometridid (item being edited?)
                                        if !(item.CanUserCreateReference && item.Enabled)
                                            item.BiometricName += ' - Disabled'
                                        push onto temp array
                                assign temp array to vm.healthcategories
                set a watcher on goalname, startdate, duration to call validateGoal() when all three are not undefined
        editbiometric.html
            Back button
            link to show help text in entry form
            Edit biometric goal panel
                Goal name - required, minlength = 3, maxlength = 100 (or 50?), unique for time frame
                Goal interval - day or week
                Start date - required, date pattern MM/dd/YYYY, min/max dates
                Duration - days (1 to 365); weeks (1 to 52)
                Biometric (e.g., Weight)
                Current amount - required, pattern, validate amount against selected biometric range, decimal digits
                Goal amount - required, pattern, validate amount against selected biometric range, decimal digits
                Notes (optional)
                biometric measure label for units changes based on the selected biometric type
            ** no Cancel button
            Submit button disabled until form validation passes

    EDITFITNESS
        controllers.goals.editfitness.js
            set any default values needed for the view
            computed values
                anyFitnessActivities(subtype, activitymeasureid)
                    foreach item in vm.fitactivities
                        if ((activityMeasureId == Entries || activityMeasureId == item.ActivityMeasureId) 
                                && (subtype (fitness, nutrition, wellness) == acttype))
                            return true
                    return false
            event handlers
                goalDateRange
                    validates input date to be between min/max, or same as original date
                evaluateDurationRange
                    if date-interval-day is checked, validate duration as between 1 and 365
                    else validate duration as between 1 and 52
                updateMeasureParams
                    if event.measures is >= 1
                        find the selected activityMeasureId in vm.measures
                            set $scope values (amtmeasure, minrange, maxrange, decimaldigits)
                        call evaluateMeasureParams to validate
                        getFitnessActivities(event.measures) // filter activities by measure
                    else if event.measures == -1000 ("Entries")
                        set $scope values (amtmeasure, minrange, maxrange, decimaldigits)
                    else do nothing

                toggleSelectedActivities
                    show/hide selected activities div
                onChangeSelectedActivities -- UNUSED
                isSelectedActivitiesRequired
                    return !activityselecttype === 'all' (return true if activityselecttype == userselected, else return false)
                updateIntervalType
                    set $scope values for [...] based on selected interval type (day, week)
                        dateintervalid
                        intervaltype
                        intervaltypeplural
                    evaluateDurationRange()
                    updateMeasureParams()
                whatActivitiesSelected
                    ng-selected handler for marking an activities as selected from vm.editinfo.ActivityIds
                whichDateIntervalChecked
                    ng-checked handler for marking the selected dateinterval as checked from vm.editinfo.DateIntervalID
                whichMeasureSelected -- UNUSED
                doSubmit
                    if form is valid
                        var goalMeasureId, activityMeasureId, activityIds;
                        var allActivitiesCategories = false;
                        if selected measure == 'Entries'
                            goalMeasureId = 1
                            activityMeasureId = null
                        else
                            goalMeasureId = 2
                            activityMeasureId = Number(selected measure)
                        if selected activity type = 'all'
                            activityIds = null
                            allActivitiesCategories = true
                        else
                            activityIds = selectedActivitiesList
                        create a request model
                            ActivityGoalName: get from form
                            StartDate: get from form
                            ActivityMeasureId: activityMeasureId
                            Notes: get from form
                            DateIntervalCount: get from form (duration)
                            DateIntervalId: get from scope variable
                            CurrentAmt: get from form
                            GoalAmt: get from form
                            ActivityTypeIds: [ get from route params or view model ] (as array)
                            ActivityIds: activityIds
                            AllActivities: allActivitiesCategories
                            AggregateFunctionId: 1 (hard coded)
                            GoalMeasureId: goalMeasureId
                            ActivityGoalId: get from route params or view model
                        send a POST request with the request model to the api (updateFitnessGoal)
                        on success, route back to GoalDetailFitness with goalId
                getFitnessActivities(activityMeasureId)
                    if app.profile is truth and vm.fitactivities contains data (length >= 1)
                        initialize qualifiedActivities array
                        get subtype from route params
                        foreach item in vm.fitactivities
                            acttype = item.ActivityTypeId
                            if ((activityMeasureId == Entries || activityMeasureId == item.ActivityMeasureId) 
                                && (subtype (fitness, nutrition, wellness) == acttype))
                                    push item to qualified activities array
                        if the result is no qualified activities, show a negative validation message
                getFitnessEditDetails
                    if app.profile is truthy and vm.editinfo is not empty []
                        set form values (models) and validation states for 
                            Measures
                                if vm.editinfo.ActivityMeasureId == null
                                    Measures = "Entries"
                                else
                                    Measures = vm.editinfo.ActivityMeasureId
                            Goalname
                            StartDate
                            Duration
                            Current amount
                            Goal amount
                            Notes
                        Set selectedActivitiesList to vm.editinfo.ActivityIds
                        if vm.editinfo.AllActivities == true
                            activityselecttype = 'all
                        else
                            activityselecttype = 'userselected'
                            toggleSelectedActivities('show')
                        update date interval labels (week, day)
                        updateIntervalType()
                        if activityIds contains data (length >= 1)
                            show selected activities div
                validateGoal
                    if app.profile is truthy
                        create a request model
                        send a POST request with the request model to the api (validateFitnessGoal)
                        if no exception returned, set validation ("unique for time") as true
                        else (exception caught) set validation as false
            other methods
                evaluateMeasureParams
                    return as valid if no range is defined
                    evaluate current amount (range, digits)
                    evaluate goal amount (range, digits)
            activate()
                make async calls (get promises)
                    setLocalAppSettings
                        if app.appsettings is truthy
                            $scope.goalmaxage = app.appsettings.goalmaxagebio
                            $scope.goalmaxfuture = app.appsettings.goalmaxfuturebio
                            initialize datepicker object values
                                startdate = $scope.goalmaxage
                                enddate = $scope.goalmaxfuture
                    loadFitnessEditDetails
                        if app.profile is truthy
                            create a request model
                            send a GET request with the model to the api
                            if return object is truthy
                                assign object to vm.editinfo
                    getActivityMeasureMap
                        if app.profile is truthy
                            create a request model
                            send a GET request with request model to api (getActivityMeasureMap)
                            foreach returned item
                                if item.ActivityTypeId == subtype of item being edited
                                    push onto submeasures array
                            assign vm.measuremap = submeasures
                    getActivityMeasures
                        if app.profile is truthy and measuremap and fitnessactivities arrays contain data
                            create a request model
                            send a GET request with the model to the api (getActivityMeasures)
                            foreach item in measuremap
                                activitymeasureid = item.ActivityMeasureId
                                foreach obj in returned data
                                    if activitymeasureid = obj[i].ActivityMeasureId
                                        if (anyFitnessActivities(subtype, obj[x].ActivityMeasureID))
                                            push the object to the vm.measures array
                            add an item to the beginning of the vm.measures array (unshift)
                                var item = {
                                    "ActivityMeasureID": -1000,
                                    "ActivityMeasureName": basedata.entrieslbl,
                                    "MaxValue": 0,
                                    "MinValue": 0,
                                    "NumberDecimalDigits": 0
                                };
                        getFitnessEditDetails()
                    getMasterActivityList
                        if app.profile is truthy
                            create a request model
                            send a GET request with the request model to the api (getFitnessActivities)
                            set vm.fitactivities = returned items
                set a watcher on goalname, startdate, duration to call validateGoal() when all three are not undefined
                activate the controller
        editfitness.html
            Back button
            link to show help text in entry form
            Edit fitness goal panel
                Goal name - required, minlength = 3, maxlength = 100 (or 50?), unique for time frame
                Goal interval - day or week
                Start date - required, date pattern MM/dd/YYYY, min/max dates
                Duration - days (1 to 365); weeks (1 to 52)
                Activity Measures (e.g., Entries, minutes, steps, times) - required, no selected activities
                Activity select type (Radio)
                    All
                    User selected
                        multi-select dropdown (hidden/disabled if All selected)
                View Activities List (link to open modal)
                Current amount - required, pattern, validate amount against selected biometric range, decimal digits
                Goal amount - required, pattern, validate amount against selected biometric range, decimal digits
                Notes (optional)
                Fitness measure label for current and goal changes based on the selected activity measure
            ** no Cancel button
            Submit button disabled until form validation passes

    FORMS (Goals tab, Create button)
        controllers.goals.forms.js
            set any default values needed for the view
            event handlers
                gotoForm
                    routes to GoalsNewFitness (with subtype Fitness, Nutrition, Wellness) or GoalsNewBiometric
            activate()
                activate the controller
        forms.html
            Displays four goal categories: fitness, nutition, wellness, biometric
            Select button (with click handlers) and description for each category

    NEWBIOMETRIC (Goals tab, Create button, Biometric subbutton)
        controllers.goals.newbiometric.js
            set any default values needed for the view
            computed values
            event handlers
                goalDateRange
                    validates the date entered against the allowable daterange (goalmaxage, goalmaxfuture)
                    inputdate is between mindate/maxdate (inclusive)
                evaluateDurationRange (when duration changed)
                    if date-interval-day is checked, validate duration as between 1 and 365
                    else, validate duration as between 1 and 52
                updateMeasureParams (when measures selection is changed)
                    if event.measures is truthy
                        find the selected biometricId and biometricMeasureId in healthcategories
                            and set $scope values (amtmeasure, minrange, maxrange, decimaldigits)
                        call evaluateMeasureParams to validate
                evaluateMeasureParams
                    if no range defined
                        return that customrange is valid (true) for both current amount and goal amount
                    else
                        if current amount has changed and is not null
                            if current amount is within minrange and maxrange (inclusive)
                                set current amount customrange validity = true
                            else
                                set current amount customrange validity = false
                            if current amount has digits after the decimal point
                                if digits after the decimal is greater than allowed
                                    set current amount customdigits validity = true
                                else
                                    set current amount customdigits validity = false
                            else
                                set current amount customdigits validity = true
                        if goal amount has changed and is not null
                            if goal amount is within minrange and maxrange (inclusive)
                                set goal amount customrange validity = true
                            else
                                set goal amount customrange validity = false
                            if goal amount has digits after the decimal point
                                if digits after the decimal is greater than allowed
                                    set goal amount customdigits validity = true
                                else
                                    set goal amount customdigits validity = false
                            else
                                set goal amount customdigits validity = true
                updateIntervalType
                    set $scope values for [...] based on selected interval type (day, week)
                        dateintervalid
                        intervaltype
                        intervaltypeplural
                    evaluateDurationRange()
                    updateMeasureParams()
                doSubmit
                    if form is valid
                        create the request model
                            GoalMeasureId: 2 (hard coded)
                            BiometricMeasureId: (from selected measure)
                            BiometricOptionId: 1 (hard coded)
                            AggregateFunctionId: 2 (hard coded)
                            BiometricGoalName: get from form
                            StartDate: get from form
                            CurrentAmt: get from form
                            GoalAmt: get from form
                            DateIntervalID: get from $scope variable
                            DateIntervalCount: get from form (duration)
                            Notes: get from form
                            BiometridIds: (from selected measure)
                            BiometricTypeIds: [1] (hard coded)
                            AllBiometrics: false (hard coded)
                        send a POST request with the request model to the api (insertBiometricGoal)
                        on success, if object returned
                            route to GoalsDetailBiometric with the BiometricGoalId
                validateGoal
                    -- CONTINUE HERE --
            other methods
            activate()
                make async calls (get promises)
                    setLocalAppSettings
                        if app.appsettings is truthy
                            $scope.entrymaxage = app.appsettings.entrymaxagebio
                            $scope.goalmaxfuture = app.appsettings.goalmaxfuturebio
                            initialize datepicker object values
                                startdate = $scope.goalmaxage
                                enddate = $scope.goalmaxfuture
                    getHealthCategories
                        if app.profile is truthy
                            create a request model
                            make a GET request with the request model to the api (getHealthCategories)
                            if an object gets returned
                                add a "comkey" value to each object item
                                    comkey = item.BiometricID + '|' + item.BiometricMeasureId (not sure we will use this pattern in new tracker)
                activate the controller
        newbiometric.html
            Back button (or link)
            Help link
            Create biometric panel
                Goal name
                Interval selector (day, week)
                Start date
                Duration
                Biometric measure
                Current amount
                Goal amount
                Notes (optional)
            Save button

    NEWFITNESS (Goals tab, Create button, Fitness/Nutrition/Wellness subbutton)
        controllers.goals.newfitness.js
        newfitness.html

    VIEW (Goals tab, View button)
        controllers.goals.view.js
        view.html
            Activity Goals
            Biometric Goals
            Past Activity Goals
            Past Biometric Goals

HELP
    controllers.help.js

    ACHIEVEMENTRANK
        controllers.help.achievementrank.js
        achievementrank.html

    FAQ
        controllers.help.faq.js
        faq.html

    ICONS
        controllers.help.icons.js
        icons.html

INBOX
    controllers.inbox.js

    ABOUT
        controllers.inbox.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html

    CREATE
        controllers.inbox.create.js
        create.html

    VIEW
        controllers.inbox.view.js
        view.html

INCLUDE
    CHANGEPASSWORD
        controllers.settings.changepassword.js
        settings.changepassword.html

    COMMUNICATION
        controllers.settings.communication.js
        settings.communication.html

    EMAIL
        controllers.settings.email.js
        settings.email.html

    MAILADDRERSS
        controllers.settings.mailaddress.js
        settings.mailaddress.html

    SECURITYQUESTIONS
        controllers.settings.securityquestions.js
        settings.securityquestions.html

    TEXTING
        controllers.settings.texting.js
        settings.texting.html

    shell.html

    TEAMCOMPETITIONS
        controllers.teams.teamcompetitions.js
        teams.teamcompetitions.html

    widgetheader.html

SETTINGS
    controllers.settings.js

    AUTHPREF
        controllers.settings.authpref.js
        authpref.html

    AUTHPREFSUCCESS
        controllers.settings.authprefsuccess.js
        authprefsuccess.html

    AUTHVERIFY
        controllers.settings.authverify.js
        authverify.html

    BADGES
        controllers.settings.badges.js
        badges.html

    COMMUNICATIONS
        controllers.settings.communications.js
        communications.html

    GROUPS
        controllers.settings.groups.js
        groups.html

    PASSWORD
        controllers.settings.password.js
        password.html

    PROFILE
        controllers.settings.profile.js
        profile.html
TEAMS
    controllers.teams.js

    ABOUT (Teams tab, About button)
        controllers.teams.about.js
            see PropelHTML5\App\core\locale\en-US\about.js
            see PropelHTML5\App\core\locale\en-US\basedata.js
        about.html

    ADDFAMILYMEMBERS
        controllers.teams.addfamilymembers.js
        addfamilymembers.html

    DETAILFAMILYCAPTAIN
        controllers.teams.detailfamilycaptain.js
        detailfamilycaptain.html

    DETAILFAMILYMEMBER
        controllers.teams.detailfamilymember.js
        detailfamilymember.html

    DETAILSTANDARDCAPTAIN
        controllers.teams.detailstandardcaptain.js
        detailstandardcaptain.html

    DETAILSTANDARDINVITE
        controllers.teams.detailstandardinvite.js
        detailstandardinvite.html

    DETAILSTANDARDMEMBER
        controllers.teams.detailstandardmember.js
        detailstandardmember.html

    EDITFORM
        controllers.teams.editform.js
        editform.html

    INVITEMEMBERS
        controllers.teams.invitemembers.js
        invitemembers.html

    NEWFORM (Teams tab, Create button)
        controllers.teams.newform.js
        newform.html

    VIEW (Teams tab, View button)
        controllers.teams.view.js
        view.html
